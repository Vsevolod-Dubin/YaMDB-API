============================= test session starts =============================
platform win32 -- Python 3.9.13, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- E:\Dev\15_sprint\api_yamdb\env\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: E:\Dev\15_sprint\api_yamdb, configfile: pytest.ini
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 6 items

tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 16%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post FAILED     [ 33%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get PASSED [ 50%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user PASSED [ 66%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin PASSED [ 83%]
tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed PASSED [100%]

================================== FAILURES ===================================
_____________________ Test05ReviewAPI.test_02_review_post _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000029FE265ABB0>
admin_client = <rest_framework.test.APIClient object at 0x0000029FE263A250>
user_client = <rest_framework.test.APIClient object at 0x0000029FE26C7E20>
moderator_client = <rest_framework.test.APIClient object at 0x0000029FE26C7A30>
admin = <User: TestAdmin>

    def test_02_review_post(self, admin_client, user_client,
                            moderator_client, admin):
        titles, _, _ = create_titles(admin_client)
        title_0_reviews_count = 0
        first_title_reviews_url = self.REVIEWS_URL_TEMPLATE.format(
            title_id=titles[0]['id']
        )
        second_title_reviews_url = self.REVIEWS_URL_TEMPLATE.format(
            title_id=titles[1]['id']
        )
    
        data = {}
        response = user_client.post(first_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если POST-запрос авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` содержит некорректные данные - '
            'должен вернуться ответ со статусом 400.'
        )
    
        post_data = {
            'text': 'Неочень',
            'score': 5
        }
        create_single_review(
            admin_client,
            titles[0]['id'],
            post_data['text'],
            post_data['score']
        )
        title_0_reviews_count += 1
    
        data = {
            'text': 'Шляпа',
            'score': 1
        }
        response = admin_client.post(first_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что при попытке пользователя создать второй отзыв на '
            'одно и то же произведение POST-запрос к '
            f'`{self.REVIEWS_URL_TEMPLATE}` вернёт ответ со статусом 400.'
        )
    
        try:
            from reviews.models import Review, Title
        except Exception as e:
            assert False, (
                'Не удалось импортировать модели из приложения reviews. '
                f'Ошибка: {e}'
            )
        title = Title.objects.get(pk=titles[0]['id'])
        review = None
        try:
            review = Review.objects.create(
                text='Текст второго отзыва',
                score='5',
                author=admin,
                title=title
            )
        except IntegrityError:
            pass
    
        assert review is None, (
            'Проверьте, что на уровне модели запрещено повторное '
            'создание отзыва на произведение от имени пользователя, отзыв '
            'которого уже существует.'
        )
    
        response = admin_client.put(first_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            'Проверьте, что PUT-запрос авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` возвращает ответ со статусом 405.'
        )
    
        create_single_review(user_client, titles[0]['id'], 'Ну такое', 3)
        title_0_reviews_count += 1
        response = create_single_review(
            moderator_client, titles[0]['id'], 'Ниже среднего', 4
        )
        title_0_reviews_count += 1
    
        assert type(response.json().get('id')) == int, (
            'Проверьте, что POST-запрос авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` возвращает данные созданного '
            'объекта. Сейчас поля `id` нет в ответе или его значение не '
            'является целым числом.'
        )
    
        data = {'text': 'На один раз', 'score': 4}
        response = user_client.post(
            self.REVIEWS_URL_TEMPLATE.format(title_id='999'), data=data
        )
        assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Проверьте, что POST-запрос авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` для несуществующего произведения '
            'возвращает ответ со статусом 404.'
        )
    
        data = {'text': 'Супер!', 'score': 11}
        response = user_client.post(second_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если в POST-запросе авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` передана оценка выше 10 баллов - '
            'должен вернуться ответ со статусом 400.'
        )
    
        data = {'text': 'Ужас!', 'score': 0}
        response = user_client.post(first_title_reviews_url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если в POST-запросе авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` передана оценка ниже 1 балла - '
            'должен вернуться ответ со статусом 400.'
        )
    
        response = user_client.get(first_title_reviews_url)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'`{self.REVIEWS_URL_TEMPLATE}` возвращает ответ со статусом 200.'
        )
        data = response.json()
        check_pagination(first_title_reviews_url, data, title_0_reviews_count)
    
        expected_data = {
            'text': post_data['text'],
            'score': post_data['score'],
            'author': admin.username
        }
        review = None
        for value in data['results']:
            if value.get('text') == post_data['text']:
                review = value
        assert review, (
            'Проверьте, что при GET-запросе к '
            f'`{self.REVIEWS_URL_TEMPLATE}` возвращается вся информация '
            'об отзывах. В ответе на запрос не обнаружен текст отзыва.'
        )
        check_fields(
            'review', self.REVIEWS_URL_TEMPLATE, review, expected_data
        )
    
        response = admin_client.get(
            self.TITLE_DETAIL_URL_TEMPLATE.format(title_id=titles[0]['id'])
        )
        data = response.json()
>       assert data.get('rating') == 4, (
            'Проверьте, что произведениям присваивается рейтинг, '
            'равный средной оценке оставленных отзывов. '
            'Поле `rating` не найдено в ответе на GET-запрос к '
            f'`{self.TITLE_DETAIL_URL_TEMPLATE}` или содержит некорректное '
            'значение.'
        )
E       AssertionError: Проверьте, что произведениям присваивается рейтинг, равный средной оценке оставленных отзывов. Поле `rating` не найдено в ответе на GET-запрос к `/api/v1/titles/{title_id}/` или содержит некорректное значение.
E       assert None == 4
E         +None
E         -4

tests\test_05_review.py:218: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/3/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/3/reviews/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/titles/3/reviews/
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/999/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/4/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/3/reviews/
=========================== short test summary info ===========================
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_post - Assert...
========================= 1 failed, 5 passed in 2.74s =========================
